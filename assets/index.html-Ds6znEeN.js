import{_ as i,c as a,a as n,o as s}from"./app-BPmJL-vo.js";const p={};function t(o,e){return s(),a("div",null,[...e[0]||(e[0]=[n(`<h2 id="pip-如何解析包-如何与conda配合" tabindex="-1"><a class="header-anchor" href="#pip-如何解析包-如何与conda配合"><span>Pip：如何解析包，如何与conda配合</span></a></h2><h3 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h3><ul><li><code>pip install [package]</code>：安装包 <ul><li>Args: <ul><li><code>-e [path]</code>：安装一个包的可编辑版本</li><li><code>-r [file]</code>：从文件安装包</li><li><code>--no-deps [package]</code>：安装包时不安装依赖</li><li><code>-i [repo]</code>：从指定的仓库安装包</li><li><code>--upgrade-strategy only-if-needed</code>：仅在需要时升级包</li></ul></li></ul></li><li><code>pip install --upgrade [package]</code>：更新包</li><li><code>pip uninstall [package]</code>：卸载包</li><li><code>pip list</code>：列出所有包</li><li><code>pip show [package]</code>：显示包的详细信息，以及依赖</li><li><code>pip search [package]</code>：搜索包</li></ul><p>关于(requirements.txt)[https://zhuanlan.zhihu.com/p/663837782]</p><h3 id="换源" tabindex="-1"><a class="header-anchor" href="#换源"><span>换源</span></a></h3><p>上海交大源，距离集群最近，速度最快。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">pip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> set</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> global.index-url</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://mirror.sjtu.edu.cn/pypi/web/simple</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者创建或编辑 <code>~/.config/pip/pip.conf</code> 文件，加入或修改 <code>index-url</code> 相关段落为：</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ini"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">global</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">index-url</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> https://mirror.sjtu.edu.cn/pypi/web/simple</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">format</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> columns</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多配置详见<a href="https://pip.pypa.io/en/stable/topics/configuration/" target="_blank" rel="noopener noreferrer">Configuring pip</a></p><h3 id="pip-与-conda-混用" tabindex="-1"><a class="header-anchor" href="#pip-与-conda-混用"><span>Pip 与 Conda 混用</span></a></h3><p>Ref 1. <a href="https://www.bilibili.com/opus/837695171647766546" target="_blank" rel="noopener noreferrer">Bilibili: Pip与Conda到底能混用吗？</a></p><p>Ref 2. <a href="https://www.anaconda.com/blog/using-pip-in-a-conda-environment" target="_blank" rel="noopener noreferrer">Anaconda: Using pip in a conda environment</a></p><p>以下内容部分引用自上述链接。</p><ol><li><p><strong>理论上二者不能掺杂使用。</strong> 在conda环境中使用pip安装包时，conda并不会察觉到 这些变更，并存在破坏环境的风险。一个可靠的方法是创建一个新的环境，并先通过conda 安装需要的包，再运行pip。再次强调，主要问题是pip的“状态性（或关联性）”——安装包的 顺序会关联更多的状态，这将使事情更难以正常工作。</p></li><li><p><strong>从PyPI构建conda包</strong> 如果需要conda没有提供的软件包，可以使用<code>conda build</code>来 创建，在<code>pypi</code>上的项目，使用<code>conda skeleton</code>可以生成一个用来<a href="https://docs.conda.io/projects/conda-build/en/stable/" target="_blank" rel="noopener noreferrer">创建conda包的配 方</a>，几乎无需手动修改。</p></li><li><p><strong>使用conda后再使用pip</strong> 如果有大量只在PyPI上的包，在这种情况下，最安全的做法 是先通过conda安装所有包，然后再使用pip安装那些conda没有的包。<span style="color:red;">应该使用<code>--upgrade-strategy only-if-needed</code>来避免pip升级 已经安装的包。</span></p></li><li><p><strong>不要在base中使用pip</strong> 如果预计某项目需要混用conda与pip，最好的做法是将此安 装放入一个专门的conda环境中，以保护其他环境免受pip可能会进行的任何修改，因为 <a href="https://conda.io/docs/user-guide/tasks/manage-environments.html" target="_blank" rel="noopener noreferrer">conda环境是独立 的</a>，允许不同 版本的包存在。</p></li><li><p><strong>在conda环境中，尽可能使用硬链接而不是复制文件。</strong> 如果安装了相同的一组包， 每个新的conda环境将只需要少量额外的磁盘空间。许多用户依赖于由安装Anaconda或 Miniconda创建的“base” conda环境，如果这个环境混杂着pip和conda安装的包，将会更难 恢复。另一方面，创建单独的conda环境允许随时整个删除和重新创建环境，而不会影响核 心的conda功能</p></li></ol><h3 id="pip-解析环境的过程" tabindex="-1"><a class="header-anchor" href="#pip-解析环境的过程"><span>Pip 解析环境的过程</span></a></h3><p><strong>20.3+：pip 的依赖解析器支持回溯。</strong></p><p>在解析依赖时，pip 需要先假设要安装的软件包版本，然后再验证这些假设是否正确。如果 发现某个假设是错误的，就需要回溯（backtrack），也就是撤回部分已经完成的工作，重 新选择另一条安装路径。</p><p>这就是为什么 pip 可能会多次下载同一个软件包的不同版本，因为每次下载都会明确展示 给用户。回溯并不是 bug 或异常情况，而是 Python 依赖解析的正常工作方式。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>用户运行 <code>pip install tea</code>，而 <code>tea</code> 依赖于 <code>hot-water</code>、<code>spoon</code> 和 <code>cup</code> 等多个 软件包。</p><p>pip 先选择 <code>tea</code> 的最新版本，并获取它的依赖列表。然后，它会按照这个依赖关系，选 择 <code>spoon</code> 和 <code>cup</code> 的最新版本。但如果发现 <code>cup</code> 的这个版本和 <code>spoon</code> 的版本不兼 容，就会回溯，换一个 <code>cup</code> 版本再试。如果换成功了，pip 会继续处理下一个依赖（比 如 <code>sugar</code>）；如果还是不行，就会继续回溯，直到找到所有依赖项都兼容的组合。</p><h3 id="减少回溯-解决依赖冲突" tabindex="-1"><a class="header-anchor" href="#减少回溯-解决依赖冲突"><span>减少回溯，解决依赖冲突</span></a></h3><ol><li>限制软件包的版本范围，或使用<a href="https://pip.pypa.io/en/stable/topics/dependency-resolution/#use-constraint-files-or-lockfiles" target="_blank" rel="noopener noreferrer">constraints文 件</a></li><li>修改requirements.txt文件，去除无用或过时的依赖，放松对依赖的版本要求</li><li>使用<code>--upgrade-strategy only-if-needed</code>参数，仅在需要时升级包</li></ol>`,24)])])}const d=i(p,[["render",t]]),c=JSON.parse('{"path":"/notes/misc/pip/","title":"pip 使用指南","lang":"en-US","frontmatter":{"title":"pip 使用指南","createTime":"2025/02/24 17:37:43","permalink":"/notes/misc/pip/","description":"Pip：如何解析包，如何与conda配合 常用指令 pip install [package]：安装包 Args: -e [path]：安装一个包的可编辑版本 -r [file]：从文件安装包 --no-deps [package]：安装包时不安装依赖 -i [repo]：从指定的仓库安装包 --upgrade-strategy only-if-nee...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"pip 使用指南\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-25T01:27:38.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://saturntsen.github.io/notes/misc/pip/"}],["meta",{"property":"og:site_name","content":"SaturnTsen"}],["meta",{"property":"og:title","content":"pip 使用指南"}],["meta",{"property":"og:description","content":"Pip：如何解析包，如何与conda配合 常用指令 pip install [package]：安装包 Args: -e [path]：安装一个包的可编辑版本 -r [file]：从文件安装包 --no-deps [package]：安装包时不安装依赖 -i [repo]：从指定的仓库安装包 --upgrade-strategy only-if-nee..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-25T01:27:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-25T01:27:38.000Z"}]]},"readingTime":{"minutes":3.75,"words":1124},"git":{"createdTime":1740430816000,"updatedTime":1740446858000,"contributors":[{"name":"SaturnTsen","username":"SaturnTsen","email":"minger233@outlook.com","commits":2,"avatar":"https://avatars.githubusercontent.com/SaturnTsen?v=4","url":"https://github.com/SaturnTsen"}]},"autoDesc":true,"filePathRelative":"notes/misc/pip.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"133904","sort":10001,"name":"misc"}]}');export{d as comp,c as data};
