import{_ as i,c as a,a as e,o as n}from"./app-BPmJL-vo.js";const l={};function h(d,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<p>Here&#39;s your formatted note about Shell scripting:</p><hr><h2 id="历史" tabindex="-1"><a class="header-anchor" href="#历史"><span>历史</span></a></h2><ul><li><a href="https://tldp.org/HOWTO/Bash-Prompt-HOWTO/nonprintingchars.html" target="_blank" rel="noopener noreferrer">Bash How to</a></li><li><a href="https://mp.weixin.qq.com/s/PoaMA100b7qLUyL-UYUXPg" target="_blank" rel="noopener noreferrer">变量与参数</a></li></ul><hr><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h2><h3 id="_1-脚本执行" tabindex="-1"><a class="header-anchor" href="#_1-脚本执行"><span>1. 脚本执行</span></a></h3><ul><li><strong>脚本第一行写解释器的目录</strong>：<br><code>#!/bin/sh</code> 或 <code>#!/bin/php</code></li><li><strong>运行脚本</strong>：<br><code>$ ./xxx.sh</code> 或 <code>$ /bin/sh ./脚本</code>（指定解释器）</li></ul><h3 id="_2-输出变量" tabindex="-1"><a class="header-anchor" href="#_2-输出变量"><span>2. 输出变量</span></a></h3><ul><li><strong>显示变量</strong>：<br><code>echo \${变量}</code></li></ul><h3 id="_3-变量" tabindex="-1"><a class="header-anchor" href="#_3-变量"><span>3. 变量</span></a></h3><ul><li><p><strong>定义变量</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">var_a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">studyShell</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>只能包含字母、数字、下划线，且不能以数字开头。</li><li>变量名和等号之间不能有空格。</li><li>不能与bash关键字冲突（可以使用<code>help</code>命令查看）。</li></ul></li><li><p><strong>赋值方式</strong>：</p><ul><li>直接赋值</li><li>用语句赋值，例如：<code>for 变量名 in &#39;指令&#39;</code> 枚举指令的全部输出。</li></ul></li><li><p><strong>引用变量</strong>：<br><code>echo \${变量名}</code>（花括号可加可不加，但加上可避免错误解释）</p></li><li><p><strong>只读变量</strong>：<br><code>readonly [变量名]</code>（不可引用其值）</p></li><li><p><strong>删除变量</strong>：<br><code>unset [变量名]</code>（<code>unset</code>不能删除只读变量）</p></li><li><p><strong>变量类型</strong>：</p><ul><li><strong>局部变量</strong>：仅在当前Shell实例中有效。</li><li><strong>环境变量</strong>：预置的与路径等相关的变量。</li><li><strong>Shell变量</strong>：既包括环境变量，也包括局部变量，保证Shell正常运行。</li></ul></li></ul><hr><h3 id="_4-字符串" tabindex="-1"><a class="header-anchor" href="#_4-字符串"><span>4. 字符串</span></a></h3><ul><li><p><strong>字符串的定义</strong>：</p><ul><li>单引号：<code>str=&#39;this is a string&#39;</code></li><li>双引号：<code>str=&quot;this is a string&quot;</code></li></ul></li><li><p><strong>字符串拼接</strong>：</p><ul><li>无符号拼接：<code>greeting=&quot;hello, &quot;$your_name&quot; !&quot;</code></li><li><code>greeting_2=&#39;hello, &#39;$your_name&#39; !&#39;</code> 与 <code>greeting_1=&quot;hello, \${your_name} !&quot;</code> 等价。</li></ul></li><li><p><strong>获取字符串长度</strong>：<br><code>\${#字符串}</code></p></li><li><p><strong>提取子字符串</strong>：</p><ul><li>从下标开始提取：<code>string=&quot;runoob is a great site&quot;</code><br><code>echo \${string:1:4}</code> 输出 <code>unoo</code></li></ul></li></ul><hr><h3 id="_5-数组" tabindex="-1"><a class="header-anchor" href="#_5-数组"><span>5. 数组</span></a></h3><ul><li><p><strong>定义数组</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">array_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=(</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">val0</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> val1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> val2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ...</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> valn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或分行定义：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">array_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=(</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    val0</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    val1</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">    val2</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>访问数组元素</strong>：<br><code>value=\${array_name[n]}</code></p></li><li><p><strong>获取数组长度</strong>：<br><code>length=\${array_name[@]}</code></p></li><li><p><strong>获取单个元素的长度</strong>：<br><code>length=\${#array_name[n]}</code></p></li></ul><hr><h3 id="_6-注释" tabindex="-1"><a class="header-anchor" href="#_6-注释"><span>6. 注释</span></a></h3><ul><li><strong>单行注释</strong>：以<code>#</code>开头。</li><li><strong>多行注释</strong>：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">标注</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">内容                </span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">标注</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="_7-传参" tabindex="-1"><a class="header-anchor" href="#_7-传参"><span>7. 传参</span></a></h3><ul><li><code>$0</code>：执行脚本的路径和文件名</li><li><code>$1 ... $n</code>：脚本的各个参数</li><li><code>$#</code>：传递到脚本的参数个数</li><li><code>$*</code>：所有参数作为一个字符串显示</li><li><code>$$</code>：当前Shell进程的PID</li><li><code>$!</code>：最近执行的后台命令的PID</li></ul><hr><h3 id="_8-运算" tabindex="-1"><a class="header-anchor" href="#_8-运算"><span>8. 运算</span></a></h3><h4 id="算术表达式" tabindex="-1"><a class="header-anchor" href="#算术表达式"><span>算术表达式</span></a></h4><p><strong>expr 运算</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">val</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">expr</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> + </span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">两数之和为 : $val</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>表达式和运算符之间要有空格，<code>2+2</code> 是不对的，必须写成 <code>2 + 2</code>。</li><li>完整的表达式要被反引号（\`\` <code></code>）包含，反引号用于调用命令并输出。</li></ul><p>例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">10</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">20</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">$b</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">expr</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> $a + $b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">expr</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> $a </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> $b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 转义字符</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">expr</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> $a / $b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">\`</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 整除</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">%</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 取模</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>let 运算</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">let</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> num=num+3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">let</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> num+=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">let</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> num++</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用时均无需加 <code>$</code> 符号。</li></ul><p><strong>(( )) 双括号运算</strong></p><ul><li>内部不需要用 <code>$</code> 引用。</li><li>可进行扩展四则运算，支持 C 语言算符，无需空格。</li></ul><p>例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 指令</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ((</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">表达式</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 指令</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ((</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">条件</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">then</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 指令</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件表达式" tabindex="-1"><a class="header-anchor" href="#条件表达式"><span>条件表达式</span></a></h4><ul><li><code>true</code> 或 <code>false</code> 为条件表达式。</li><li>条件必须放在方括号之间，并且左右两边必须有空格。</li></ul><p>示例：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 等于</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -eq</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 等于</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 不等于</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -ne</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 不等于</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 比较运算符</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-gt</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 大于</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-lt</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 小于</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-ge</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 大于等于</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-le</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   # 小于等于</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串运算" tabindex="-1"><a class="header-anchor" href="#字符串运算"><span>字符串运算</span></a></h4><ul><li><code>[ $a = $b ]</code> 或 <code>[ $a == $b ]</code> 判等。</li><li><code>!=</code> 判不等。</li><li><code>-z</code> 检测是否为空 <code>[ -z $a ]</code>。</li><li><code>-n</code> 检测是否非空 <code>[ -n $a ]</code>。</li></ul><h4 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算"><span>逻辑运算</span></a></h4><ul><li><code>-a</code> 与（AND）</li><li><code>-o</code> 或（OR）</li><li><code>!</code> 非（NOT）</li></ul><h4 id="高级逻辑运算" tabindex="-1"><a class="header-anchor" href="#高级逻辑运算"><span>高级逻辑运算</span></a></h4><ul><li><code>[[ 表达式1 &amp;&amp; 表达式2 ]]</code> 与（AND）</li><li><code>[[ 表达式1 || 表达式2 ]]</code> 或（OR）</li><li><code>[[ &gt; ]]</code> 字符串字典序比较（单括号需转义 <code>\\&gt;</code>）</li><li><code>[[ &lt; ]]</code> 字符串字典序比较（单括号需转义 <code>\\&lt;</code>）</li></ul><h4 id="文件运算" tabindex="-1"><a class="header-anchor" href="#文件运算"><span>文件运算</span></a></h4><ul><li><code>-b file</code> 判断是否为块设备文件。</li><li><code>-c file</code> 判断是否为字符设备文件。</li><li><code>-d file</code> 判断是否为目录。</li><li><code>-f file</code> 判断是否是普通文件。</li><li><code>-r file</code> 判断是否可读。</li><li><code>-w file</code> 判断是否可写。</li><li><code>-x file</code> 判断是否可执行。</li><li><code>-s file</code> 判断文件是否为空。</li><li><code>-e file</code> 判断文件是否存在。</li></ul><hr><h3 id="循环与分支" tabindex="-1"><a class="header-anchor" href="#循环与分支"><span>循环与分支</span></a></h3><h4 id="_1-if-分支" tabindex="-1"><a class="header-anchor" href="#_1-if-分支"><span>1. <strong>if 分支</strong></span></a></h4><p>基本结构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 条件1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">then</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    指令1</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">elif</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 条件2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">then</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    指令2</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    指令3</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一行写法：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 条件1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> then</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 指令1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> elif</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 条件2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">];</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> then</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 指令2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-case-分支" tabindex="-1"><a class="header-anchor" href="#_2-case-分支"><span>2. <strong>case 分支</strong></span></a></h4><p>基本结构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">case</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 值 </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span></span>
<span class="line"><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">    模式一</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        指令</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        ;;</span></span>
<span class="line"><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">    模式二</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        指令</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        ;;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    *)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        指令</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        ;;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">esac</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-for-循环" tabindex="-1"><a class="header-anchor" href="#_3-for-循环"><span>3. <strong>for 循环</strong></span></a></h4><p>基本结构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 变量 in 第一个 第二个 第三个</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    指令</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    ...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一行写法：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> var</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> A</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> B</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> C</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> do</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 指令</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 指令</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> done</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-while-循环" tabindex="-1"><a class="header-anchor" href="#_4-while-循环"><span>4. <strong>while 循环</strong></span></a></h4><p>基本结构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 条件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    指令</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-无限循环" tabindex="-1"><a class="header-anchor" href="#_5-无限循环"><span>5. <strong>无限循环</strong></span></a></h4><p>基本结构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> true</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    指令</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-读入数据" tabindex="-1"><a class="header-anchor" href="#_6-读入数据"><span>6. <strong>读入数据</strong></span></a></h4><p>基本结构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">while</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> read</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> xxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_7-until-循环" tabindex="-1"><a class="header-anchor" href="#_7-until-循环"><span>7. <strong>until 循环</strong></span></a></h4><p>基本结构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">until</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> 条件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">do</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    指令</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-循环控制" tabindex="-1"><a class="header-anchor" href="#_8-循环控制"><span>8. <strong>循环控制</strong></span></a></h4><ul><li><code>continue</code>：跳出当前循环的当前迭代，进入下一次迭代。</li><li><code>break</code>：跳出整个循环。</li></ul><hr><h3 id="_9-函数" tabindex="-1"><a class="header-anchor" href="#_9-函数"><span>9. 函数</span></a></h3><h4 id="_1-定义函数" tabindex="-1"><a class="header-anchor" href="#_1-定义函数"><span>1. <strong>定义函数</strong></span></a></h4><p>基本结构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">函数名</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    指令</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 返回值</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (0~255)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用函数" tabindex="-1"><a class="header-anchor" href="#_2-使用函数"><span>2. <strong>使用函数</strong></span></a></h4><p>调用函数时，传入参数：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">函数名</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 参数1</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 参数2</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ...</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 参数n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在函数内部，可以使用传入的参数，例如：</p><ul><li><code>$0</code>：函数名</li><li><code>$1, $2, ...</code>：函数的参数</li><li><code>$#</code>：传入参数的个数</li></ul><h4 id="_3-返回值" tabindex="-1"><a class="header-anchor" href="#_3-返回值"><span>3. <strong>返回值</strong></span></a></h4><ul><li><code>return</code> 用于返回函数的状态码。通常返回值为 <strong>0</strong> 表示成功，其他值表示错误。 <ul><li>0：表示执行成功（在Bash中为true）</li><li>非0：表示执行失败（在Bash中为false）</li></ul></li></ul><h4 id="_4-函数输出" tabindex="-1"><a class="header-anchor" href="#_4-函数输出"><span>4. <strong>函数输出</strong></span></a></h4><p>Bash函数的输出一般通过 <code>echo</code> 来实现，而不是通过 <code>return</code> 返回值。<code>return</code> 主要用于状态码。</p><h4 id="_5-文件包含" tabindex="-1"><a class="header-anchor" href="#_5-文件包含"><span>5. <strong>文件包含</strong></span></a></h4><ul><li>使用 <code>source [文件]</code> 或 <code>. [文件]</code> 来执行文件中的代码。文件中的函数、变量等会 被载入到当前环境中。</li></ul><p>例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">source</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myscript.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">.</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> myscript.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样你可以在当前脚本中使用 <code>myscript.sh</code> 中定义的函数和变量。</p><h3 id="_10-重定向" tabindex="-1"><a class="header-anchor" href="#_10-重定向"><span>10. 重定向</span></a></h3><h4 id="_1-常用指令" tabindex="-1"><a class="header-anchor" href="#_1-常用指令"><span>1. <strong>常用指令</strong></span></a></h4><ul><li><code>read [新变量名]</code>：读取用户输入并存储到变量中。</li><li><code>echo &quot;字符串&quot;</code>：输出字符串。可以使用 <code>-e</code> 开启转义字符（如 <code>\\n</code> 换行，<code>\\c</code> 不换行）。</li><li><code>cat [文件]</code>：显示文件内容。</li><li><code>head -数字 文件</code>：显示文件前n行。</li><li><code>tail -数字 文件</code>：显示文件后n行。</li><li><code>grep &quot;目标字符串&quot; &quot;文件&quot;</code>：查找文件中含有目标字符串的行，并输出。</li><li><code>wc -c</code>：显示文件字节数，<code>-l</code> 显示行数，<code>-w</code> 显示字数。</li></ul><h4 id="_2-printf-格式化输出" tabindex="-1"><a class="header-anchor" href="#_2-printf-格式化输出"><span>2. <strong><code>printf</code> 格式化输出</strong></span></a></h4><ul><li><code>printf &quot;控制字符串&quot; 变量1 变量2 ... 变量n</code><ul><li><code>%-10s</code>：输出字符串，10字符左对齐</li><li><code>%8d</code>：输出整数，8字符右对齐</li><li><code>%-4.2f</code>：输出两位小数，四字符左对齐</li><li><code>\\f</code>：换页</li><li><code>\\n</code>：换行</li><li><code>\\t</code>：制表</li><li><code>\\\\</code>：反斜杠</li></ul></li></ul><h4 id="_3-输入输出流编号" tabindex="-1"><a class="header-anchor" href="#_3-输入输出流编号"><span>3. <strong>输入输出流编号</strong></span></a></h4><ul><li><strong>标准输入</strong>：0（stdin）</li><li><strong>标准输出</strong>：1（stdout）</li><li><strong>标准错误</strong>：2（stderr）</li></ul><h4 id="_4-文件重定向" tabindex="-1"><a class="header-anchor" href="#_4-文件重定向"><span>4. <strong>文件重定向</strong></span></a></h4><ul><li><code>ls -A 1&gt;output.txt</code>：将 <code>ls -A</code> 命令的标准输出全部重定向到 <code>output.txt</code>。</li><li><code>ls -A 2&gt;&amp;1</code>：将标准错误重定向到标准输出。</li><li><code>command &lt; file</code>：将文件重定向到标准输入。</li></ul><p><strong>重定向符号</strong>：</p><ul><li><code>&gt;</code>：覆写文件</li><li><code>&gt;&gt;</code>：追加内容到文件</li></ul><h4 id="_5-管道重定向" tabindex="-1"><a class="header-anchor" href="#_5-管道重定向"><span>5. <strong>管道重定向</strong></span></a></h4><ul><li><code>命令A | 命令B</code>：将命令A的标准输出（stdout）重定向到命令B的标准输入（stdin）。 <ul><li>注意：管道的方向从左到右。</li></ul></li></ul><h4 id="_6-文件重定向-进阶" tabindex="-1"><a class="header-anchor" href="#_6-文件重定向-进阶"><span>6. <strong>文件重定向（进阶）</strong></span></a></h4><ul><li><code>command &gt; file</code>：将命令的输出重定向到 <code>file</code>。</li><li><code>command &lt; file</code>：将文件作为命令的输入。</li><li><code>command &gt;&gt; file</code>：将命令的输出以追加方式重定向到 <code>file</code>。</li><li><code>n &gt; file</code>：将文件描述符 <code>n</code> 的输出重定向到 <code>file</code>。</li><li><code>n &gt;&gt; file</code>：将文件描述符 <code>n</code> 的输出以追加方式重定向到 <code>file</code>。</li><li><code>n &gt;&amp; m</code>：将文件描述符 <code>n</code> 和 <code>m</code> 的输出合并。</li><li><code>n &lt;&amp; m</code>：将文件描述符 <code>n</code> 和 <code>m</code> 的输入合并。</li><li><code>&lt;&lt; tag</code>：将开始标记 <code>tag</code> 和结束标记 <code>tag</code> 之间的内容作为输入。</li></ul><h4 id="_7-输出到-dev-null" tabindex="-1"><a class="header-anchor" href="#_7-输出到-dev-null"><span>7. <strong>输出到 <code>/dev/null</code></strong></span></a></h4><ul><li><code>command &gt; /dev/null</code>：将输出重定向到 <code>/dev/null</code>，即丢弃输出。这可以用来执行 某个命令而不希望在屏幕上显示输出结果。</li></ul><h3 id="_11-特殊符号" tabindex="-1"><a class="header-anchor" href="#_11-特殊符号"><span>11.特殊符号</span></a></h3><h4 id="_1-变量-引用变量" tabindex="-1"><a class="header-anchor" href="#_1-变量-引用变量"><span>1. <strong><code>\${变量}</code></strong>：引用变量</span></a></h4><ul><li>用于引用变量的值。例如，<code>\${var}</code> 引用变量 <code>var</code> 的值。</li></ul><h4 id="_2-指令-获取指令输出值-包括-stderr" tabindex="-1"><a class="header-anchor" href="#_2-指令-获取指令输出值-包括-stderr"><span>2. <strong><code>指令</code></strong>：获取指令输出值（包括 <code>stderr</code>）</span></a></h4><ul><li>将命令放在反引号中，用于执行该命令并获取其输出。示例：<code>result=\`ls\`</code> 会将 <code>ls</code> 命令的输出赋值给变量 <code>result</code>。</li></ul><h4 id="_3-指令-获取指令输出值-不包括-stderr" tabindex="-1"><a class="header-anchor" href="#_3-指令-获取指令输出值-不包括-stderr"><span>3. <strong><code>$(指令)</code></strong>：获取指令输出值（不包括 <code>stderr</code>）</span></a></h4><ul><li><code>$(...)</code> 是 <code>\`...\`</code> 的现代替代形式，功能相同，但更易读。它将执行指令并返回标准输出，不包含标准错误输出。示例：<code>result=$(ls)</code>。</li></ul><h4 id="_4-指令1-指令2-指令n-代码块-新shell" tabindex="-1"><a class="header-anchor" href="#_4-指令1-指令2-指令n-代码块-新shell"><span>4. <strong><code>(指令1; 指令2; 指令n)</code></strong>：代码块（新Shell）</span></a></h4><ul><li>使用圆括号将多个指令放在同一代码块中执行，并且这些指令会在一个新的 shell 中执 行。例如：<code>(cd /tmp; ls)</code>。这会在新 shell 中切换到 <code>/tmp</code> 目录并列出文件，但不 会影响当前 shell。</li></ul><h4 id="_5-指令1-指令2-指令n-代码块-同一shell" tabindex="-1"><a class="header-anchor" href="#_5-指令1-指令2-指令n-代码块-同一shell"><span>5. <strong><code>{ 指令1; 指令2; 指令n; }</code></strong>：代码块（同一Shell）</span></a></h4><ul><li>使用花括号 <code>{}</code> 将多个指令放在同一个 shell 中执行，指令之间必须用分号 <code>;</code> 分 隔。例如：<code>{ cd /tmp; ls; }</code>。这会在当前 shell 中执行，且不启动新的 shell。</li></ul><h4 id="_6-表达式-数学表达式" tabindex="-1"><a class="header-anchor" href="#_6-表达式-数学表达式"><span>6. <strong><code>$((表达式))</code></strong>：数学表达式</span></a></h4><ul><li>用于进行数学运算。可以执行加、减、乘、除等基本运算。例如：<code>$((3 + 4))</code> 会返回 <code>7</code>。在进行运算时不需要使用 <code>$</code> 符号来引用变量，可以直接写变量名：<code>$((a + b))</code>。</li></ul><h4 id="_7-和-条件表达式" tabindex="-1"><a class="header-anchor" href="#_7-和-条件表达式"><span>7. <strong><code>[]</code> 和 <code>[[ ]]</code></strong>：条件表达式</span></a></h4><ul><li><code>[]</code>：用于测试条件，支持基本的条件判断（如文件检查、字符串比较等）。 <ul><li>示例：<code>[ -f file ]</code> 判断 <code>file</code> 是否为普通文件。</li></ul></li><li><code>[[ ]]</code>：用于进行更复杂的条件判断，支持逻辑运算符和字符串比较（例如，<code>&amp;&amp;</code> 和 <code>||</code>）。<code>[[ ]]</code> 是一种更强大的语法，通常比 <code>[]</code> 更推荐使用。 <ul><li>示例：<code>[[ $a -eq $b ]]</code> 判断 <code>$a</code> 是否等于 <code>$b</code>。</li></ul></li></ul>`,133)])])}const r=i(l,[["render",h]]),p=JSON.parse(`{"path":"/notes/misc/bash-script/","title":"Bash Script","lang":"en-US","frontmatter":{"title":"Bash Script","tags":["utils"],"createTime":"2023/10/03 13:30:51","permalink":"/notes/misc/bash-script/","description":"Here's your formatted note about Shell scripting: 历史 Bash How to 变量与参数 基本语法 1. 脚本执行 脚本第一行写解释器的目录： #!/bin/sh 或 #!/bin/php 运行脚本： $ ./xxx.sh 或 $ /bin/sh ./脚本（指定解释器） 2. 输出变量 显示变量： e...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bash Script\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T10:32:27.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://saturntsen.github.io/notes/misc/bash-script/"}],["meta",{"property":"og:site_name","content":"SaturnTsen"}],["meta",{"property":"og:title","content":"Bash Script"}],["meta",{"property":"og:description","content":"Here's your formatted note about Shell scripting: 历史 Bash How to 变量与参数 基本语法 1. 脚本执行 脚本第一行写解释器的目录： #!/bin/sh 或 #!/bin/php 运行脚本： $ ./xxx.sh 或 $ /bin/sh ./脚本（指定解释器） 2. 输出变量 显示变量： e..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-21T10:32:27.000Z"}],["meta",{"property":"article:tag","content":"utils"}],["meta",{"property":"article:modified_time","content":"2025-02-21T10:32:27.000Z"}]]},"readingTime":{"minutes":8.16,"words":2449},"git":{"createdTime":1734809706000,"updatedTime":1740133947000,"contributors":[{"name":"SaturnTsen","username":"SaturnTsen","email":"minger233@outlook.com","commits":3,"avatar":"https://avatars.githubusercontent.com/SaturnTsen?v=4","url":"https://github.com/SaturnTsen"}]},"autoDesc":true,"filePathRelative":"notes/misc/Bash Script.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"133904","sort":10001,"name":"misc"}]}`);export{r as comp,p as data};
